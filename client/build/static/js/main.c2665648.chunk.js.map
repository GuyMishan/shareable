{"version":3,"sources":["_constants/alertConstants.js","_helpers/history.js","actions/alertActions.js","_services/notificationService.js","actions/notificationActions.js","_constants/socketConstants.js","_constants/userConstants.js","_constants/postConstants.js","components/PrivateRoute.js","App.js","serviceWorker.js","reducers/authenticationReducer.js","reducers/postReducer.js","reducers/userProfileReducer.js","reducers/postUploadPageReducer.js","reducers/newUsersReducer.js","reducers/index.js","reducers/registrationReducer.js","reducers/userReducer.js","reducers/passwordResetReducer.js","reducers/alertReducer.js","reducers/commentReducer.js","reducers/commentRepliesReducer.js","reducers/notificationReducer.js","reducers/socketReducer.js","reducers/chatReducer.js","store.js","index.js","_constants/chatConstants.js","_constants/commentConstants.js","_constants/notificationConstants.js"],"names":["__webpack_require__","d","__webpack_exports__","alertConstants","SUCCESS","ERROR","CLEAR","history","history__WEBPACK_IMPORTED_MODULE_0__","createBrowserHistory","alertActions","_constants_alertConstants__WEBPACK_IMPORTED_MODULE_0__","success","message","type","error","clear","notificatonService","readNotifications","notificationIds","requestOptions","method","headers","Content-Type","Authorization","JSON","parse","localStorage","getItem","token","body","stringify","fetch","then","handleResponse","res","fetchNotifications","queryOptions","Object","objectSpread","data","response","text","ok","status","removeItem","window","location","reload","statusText","Promise","reject","notificationActions","toggleNotificationPopup","dispatch","notificationConstants","TOGGLE_NOTIFICATION_POPUP","closeNotificationPopup","CLOSE_NOTIFICATION_POPUP","addNotification","ADD_NOTIFICATION","initialFetch","_response$","notifications","total","ids","filter","e","read","map","_id","concat","uniqueIds","item","index","indexOf","undefined","READ_NOTIFICATIOS","readCount","length","console","log","FETCH_NOTIFICATIONS_SUCCESS","socketConstants","CONNECT","userConstants","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","GETUSER_REQUEST","GETUSER_SUCCESS","GETUSER_FAILURE","DELETE_REQUEST","DELETE_SUCCESS","DELETE_FAILURE","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAILURE","USER_UPDATE_PROFILEPICTURE_SUCCESS","USER_LIKE_COMMENT","USER_DISLIKE_COMMENT","USER_DISLIKE_POST","USER_LIKE_POST","USER_LIKE_COMMENT_REPLY","USER_DISLIKE_COMMENT_REPLY","GET_USERPROFILE_DATA_REQUEST","GET_USERPROFILE_DATA","GET_USERPROFILE_DATA_FAILURE","GET_USER_PROFILE_FOLLOWINGS","GET_USER_PROFILE_FOLLOWERS","GET_USER_FOLLOWINGS","GET_USER_FOLLOWERS","FOLLOW_USER","UNFOLLOW_USER","GET_POSTS","GET_USER_PROFILE_POSTS","PASSWORD_RESET_REQUEST","PASSWORD_RESET_RESPONSE","GET_NEW_USERS_SUCCESS","GET_NEW_USERS_REQUEST","NEW_USER","postConstants","POSTS_REQUEST","POSTS_SUCCESS","POSTS_FAILURE","HASHTAG_POSTS_SUCCESS","LOCATION_POSTS_SUCCESS","HASHTAG_POSTS_REQUEST","LOCATION_POSTS_REQUEST","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","POST_DELETE_REQUEST","POST_DELETE_SUCCESS","POST_DELETE_FAILURE","LIKE_POST","DISLIKE_POST","GET_POST_LIKES","INIT_COMMENT","NEW_POST","GET_POST","IMAGE_CROP_SELECT","IMAGE_SELECT","MAP_LOCATION_SELECT","CANVAS_HAS_VALUE","PrivateRoute","_ref","Component","component","rest","objectWithoutProperties","react_default","a","createElement","Route","assign","render","props","Redirect","to","pathname","state","from","NotFoundPage","lazy","bind","PasswordResetPage","all","HomePage","LoginPage","RegisterPage","ProfilePage","UserProfile","PostUploadPage","PostPage","HashtagPage","LocationPage","MessengerPage","Navbar","App","handleNotificationPopupClose","_this$props","_this","isOpen","this","addEventListener","listen","action","authentication","onClick","Router","react","fallback","loggedIn","Switch","PrivateRoute_PrivateRoute","exact","path","push","key","match","params","hashtag","postId","coordinates","username","React","connectedApp","connect","notification","Boolean","hostname","user","initialState","posts","postsByHashtag","postsByLocation","totalPosts","totalPostsByHashtag","totalPostsByLocation","postLikes","post","fetching","deleting","posting","loadingUser","profilePicture","firstName","lastName","email","bio","followings","followers","postsCount","follwingUsers","followerUsers","imgSrc","imgSrcExt","cropImgSrc","canvasHasValue","divs","step","uploading","locationName","users","fetchingNewUsers","usersCount","appReducer","combineReducers","arguments","count","toConsumableArray","commentConstants","ADD_COMMENT_SUCCESS","comment","comments","likes","loggingIn","registration","registering","updaingUser","hasError","allNotifications","notificationsCount","messagesCount","followingIds","commentLikes","commentReplyLikes","_action$user","commentId","userId","result","id","openedPost","loadingPost","chatConstants","INC_MESSAGE_COUNT","READ_MESSAGES","messageIds","newUsers","passwordReset","requesting","alert","FETCH_COMMENTS_REQUEST","defineProperty","FETCH_COMMENTS_SUCCESS","INCREASE_REPLIES_NUMBER","replies","LIKE_COMMENT","DISLIKE_COMMENT","GET_COMMENT_LIKES","FETCH_COMMENT_REPLIES_REQUEST","FETCH_COMMENT_REPLIES_SUCCESS","INIT_REPLY_COMMENT","ADD_REPLY_COMMENT_SUCCESS","commentAt","LIKE_COMMENT_REPLY","parentId","DISLIKE_COMMENT_REPLY","GET_COMMENT_REPLY_LIKES","userProfile","allNotificationsCount","socket","postUpload","div","hasValue","_action$location","geometry","chat","rooms","currentRoom","roomsFetching","roomId","callingModal","answeringModal","searchedRooms","TYPING","isTyping","STOPPED_TYPING","CHANGE_ROOM","room","INIT_MESSAGE_ARRAY","messages","initialMessagesFetchig","messageFetching","GET_ROOMS_REQUEST","GET_ROOMS_SUCCESS","ADD_NEW_ROOM","GET_MESSAGES_INITIAL_REQUEST","GET_MESSAGES_REQUEST","GET_MESSAGES_SUCCESS","prev","i","sender","picture","SEND_MESSAGE_REQUEST","_objectSpread8","SEND_MESSAGE_SUCCESS","_objectSpread9","findIndex","newRoom","uuid","lastMessage","NEW_MESSAGE","_objectSpread10","includes","CHANGE_ACTIVITY_STATUS","members","activityStatus","RECEIVE_READ_MESSAGES","OPEN_CALLING_MODAL","CLOSE_CALLING_MODAL","OPEN_ANSWERING_MODAL","webRtc","caller","CLOSE_ANSWERING_MODAL","SEARCH_USERS","rootReducer","middleware","thunk","store","createStore","compose","applyMiddleware","apply","ReactDOM","es","BrowserRouter","document","getElementById","navigator","serviceWorker","ready","unregister","NEW_ANSWER","NEW_IMAGE_MESSAGE_REQUEST","NEW_IMAGE_MESSAGE_SUCCESS","FETCH_COMMENTS_FAILURE","ADD_REPLY_COMMENT_FAILURE","FETCH_COMMENT_REPLIES_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_FAILURE","FETCH_NOTIFICATIONS_REQUEST"],"mappings":"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","file":"static/js/main.c2665648.chunk.js","sourcesContent":["export const alertConstants = {\n  SUCCESS: \"ALERT_SUCCESS\",\n  ERROR: \"ALERT_ERROR\",\n  CLEAR: \"ALERT_CLEAR\"\n};\n","import { createBrowserHistory } from \"history\";\n\nexport const history = createBrowserHistory();\n","import { alertConstants } from \"../_constants/alertConstants\";\n\nexport const alertActions = {\n  success,\n  error,\n  clear\n};\n\nfunction success(message) {\n  return { type: alertConstants.SUCCESS, message };\n}\n\nfunction error(message) {\n  return { type: alertConstants.ERROR, message };\n}\n\nfunction clear() {\n  return { type: alertConstants.CLEAR };\n}\n","export const notificatonService = {\n  readNotifications,\n  fetchNotifications\n};\n\nfunction logout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem(\"user\");\n}\n\nfunction readNotifications(notificationIds) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: JSON.parse(localStorage.getItem(\"user\")).token\n    },\n    body: JSON.stringify({\n      notificationIds\n    })\n  };\n\n  return fetch(\"/api/notification/readNotifications/\", requestOptions)\n    .then(handleResponse)\n    .then(res => {\n      return res;\n    });\n}\n\nfunction fetchNotifications(queryOptions) {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: JSON.parse(localStorage.getItem(\"user\")).token\n    },\n    body: JSON.stringify({\n      ...queryOptions\n    })\n  };\n\n  return fetch(\"/api/notification/getNotifications/\", requestOptions)\n    .then(handleResponse)\n    .then(res => {\n      return res.data;\n    });\n}\n\nfunction handleResponse(response) {\n  return response.text().then(text => {\n    const data = text && JSON.parse(text);\n    if (!response.ok) {\n      if (response.status === 401) {\n        // auto logout if 401 response returned from api\n        logout();\n        window.location.reload(true);\n      }\n\n      const error = (data && data.message) || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n","import { notificationConstants } from \"../_constants/notificationConstants\";\nimport { notificatonService } from \"../_services/notificationService\";\n\nexport const notificationActions = {\n  toggleNotificationPopup,\n  closeNotificationPopup,\n  addNotification,\n  fetchNotifications\n};\n\nfunction readNotifications(notificationIds) {\n  notificatonService.readNotifications(notificationIds).then(\n    () => {},\n    error => {\n      console.log(error);\n    }\n  );\n}\n\nfunction fetchNotifications(queryOptions, notificationIds) {\n  return dispatch => {\n    notificatonService.fetchNotifications(queryOptions).then(\n      response => {\n        if (queryOptions.initialFetch) {\n          const { notifications, total } = response[0];\n          dispatch(success(notifications, total[0], queryOptions.initialFetch));\n          // read notifications\n          const ids = notifications\n            .filter(e => !e.read)\n            .map(e => e._id)\n            .concat(notificationIds);\n          const uniqueIds = ids\n            .filter((item, index) => ids.indexOf(item) === index)\n            .filter(item => item !== undefined);\n          readNotifications(uniqueIds);\n\n          if (uniqueIds[0] !== undefined) {\n            dispatch({\n              type: notificationConstants.READ_NOTIFICATIOS,\n              readCount: uniqueIds.length\n            });\n          }\n        } else {\n          dispatch(success(response));\n          // read notifications\n          const ids = response\n            .filter(e => !e.read)\n            .map(e => e._id)\n            .concat(notificationIds);\n          const uniqueIds = ids\n            .filter((item, index) => ids.indexOf(item) === index)\n            .filter(item => item !== undefined);\n          readNotifications(uniqueIds);\n\n          if (uniqueIds[0] !== undefined) {\n            dispatch({\n              type: notificationConstants.READ_NOTIFICATIOS,\n              readCount: uniqueIds.length\n            });\n          }\n        }\n      },\n      error => {\n        console.log(error);\n      }\n    );\n  };\n\n  function success(notifications, total, initialFetch) {\n    return {\n      type: notificationConstants.FETCH_NOTIFICATIONS_SUCCESS,\n      notifications,\n      total,\n      initialFetch\n    };\n  }\n}\n\nfunction toggleNotificationPopup() {\n  return dispatch => {\n    dispatch({\n      type: notificationConstants.TOGGLE_NOTIFICATION_POPUP\n    });\n  };\n}\n\nfunction closeNotificationPopup() {\n  return dispatch => {\n    dispatch({ type: notificationConstants.CLOSE_NOTIFICATION_POPUP });\n  };\n}\n\nfunction addNotification(data) {\n  return dispatch => {\n    dispatch({ type: notificationConstants.ADD_NOTIFICATION, data });\n  };\n}\n","export const socketConstants = {\n  CONNECT: \"CONNECT\"\n};\n","export const userConstants = {\n  REGISTER_REQUEST: \"USERS_REGISTER_REQUEST\",\n  REGISTER_SUCCESS: \"USERS_REGISTER_SUCCESS\",\n  REGISTER_FAILURE: \"USERS_REGISTER_FAILURE\",\n\n  LOGIN_REQUEST: \"USERS_LOGIN_REQUEST\",\n  LOGIN_SUCCESS: \"USERS_LOGIN_SUCCESS\",\n  LOGIN_FAILURE: \"USERS_LOGIN_FAILURE\",\n\n  LOGOUT: \"USERS_LOGOUT\",\n\n  GETUSER_REQUEST: \"USER_GETUSER_REQUEST\",\n  GETUSER_SUCCESS: \"USER_GETUSER_SUCCESS\",\n  GETUSER_FAILURE: \"USER_GETUSER_FAILURE\",\n\n  DELETE_REQUEST: \"USERS_DELETE_REQUEST\",\n  DELETE_SUCCESS: \"USERS_DELETE_SUCCESS\",\n  DELETE_FAILURE: \"USERS_DELETE_FAILURE\",\n\n  USER_UPDATE_REQUEST: \"USER_UPDATE_REQUEST\",\n  USER_UPDATE_SUCCESS: \"USER_UPDATE_SUCCESS\",\n  USER_UPDATE_FAILURE: \"USER_UPDATE_FAILURE\",\n\n  USER_UPDATE_PROFILEPICTURE_SUCCESS: \"USER_UPDATE_PROFILEPICTURE_SUCCESS\",\n\n  USER_LIKE_COMMENT: \"USER_LIKE_COMMENT\",\n  USER_DISLIKE_COMMENT: \"USER_DISLIKE_COMMENT\",\n\n  USER_DISLIKE_POST: \"USER_DISLIKE_POST\",\n  USER_LIKE_POST: \"USER_LIKE_POST\",\n\n  USER_LIKE_COMMENT_REPLY: \"USER_LIKE_COMMENT_REPLY\",\n  USER_DISLIKE_COMMENT_REPLY: \"USER_DISLIKE_COMMENT_REPLY\",\n\n  GET_USERPROFILE_DATA_REQUEST: \"GET_USERPROFILE_DATA_REQUEST\",\n  GET_USERPROFILE_DATA: \"GET_USERPROFILE_DATA\",\n  GET_USERPROFILE_DATA_FAILURE: \"GET_USERPROFILE_DATA_FAILURE\",\n\n  GET_USER_PROFILE_FOLLOWINGS: \"GET_USER_PROFILE_FOLLOWINGS\",\n  GET_USER_PROFILE_FOLLOWERS: \"GET_USER_PROFILE_FOLLOWERS\",\n\n  GET_USER_FOLLOWINGS: \"GET_USER_FOLLOWINGS\",\n  GET_USER_FOLLOWERS: \"GET_USER_FOLLOWERS\",\n\n  FOLLOW_USER: \"FOLLOW_USER\",\n  UNFOLLOW_USER: \"UNFOLLOW_USER\",\n\n  GET_POSTS: \"GET_POSTS\",\n  GET_USER_PROFILE_POSTS: \"GET_USER_PROFILE_POSTS\",\n\n  PASSWORD_RESET_REQUEST: \"PASSWORD_RESET_REQUEST\",\n  PASSWORD_RESET_RESPONSE: \"PASSWORD_RESET_RESPONSE\",\n\n  GET_NEW_USERS_SUCCESS: \"GET_NEW_USERS_SUCCESS\",\n  GET_NEW_USERS_REQUEST: \"GET_NEW_USERS_REQUEST\",\n  NEW_USER: \"NEW_USER\",\n};\n","export const postConstants = {\n  POSTS_REQUEST: \"POSTS_REQUEST\",\n  POSTS_SUCCESS: \"POSTS_SUCCESS\",\n  POSTS_FAILURE: \"POSTS_FAILURE\",\n\n  HASHTAG_POSTS_SUCCESS: \"HASHTAG_POSTS_SUCCESS\",\n  LOCATION_POSTS_SUCCESS: \"LOCATION_POSTS_SUCCESS\",\n\n  HASHTAG_POSTS_REQUEST: \"HASHTAG_POSTS_REQUEST\",\n  LOCATION_POSTS_REQUEST: \"LOCATION_POSTS_REQUEST\",\n\n  ADD_POST_REQUEST: \"ADD_POST_REQUEST\",\n  ADD_POST_SUCCESS: \"ADD_POST_SUCCESS\",\n  ADD_POST_FAILURE: \"ADD_POST_FAILURE\",\n\n  POST_DELETE_REQUEST: \"POSTS_DELETE_REQUEST\",\n  POST_DELETE_SUCCESS: \"POSTS_DELETE_SUCCESS\",\n  POST_DELETE_FAILURE: \"POSTS_DELETE_FAILURE\",\n\n  LIKE_POST: \"LIKE_POST\",\n  DISLIKE_POST: \"DISLIKE_POST\",\n\n  GET_POST_LIKES: \"GET_POST_LIKES\",\n\n  INIT_COMMENT: \"INIT_COMMENT\",\n\n  NEW_POST: \"NEW_POST\",\n  GET_POST: \"GET_POST\",\n\n  //edit post page\n  IMAGE_CROP_SELECT: \"IMAGE_CROP_SELECT\",\n  IMAGE_SELECT: \"IMAGE_SELECT\",\n  MAP_LOCATION_SELECT: \"MAP_LOCATION_SELECT\",\n  CANVAS_HAS_VALUE: \"CANVAS_HAS_VALUE\"\n  //-----------\n};\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nexport const PrivateRoute = ({ component: Component, ...rest }) => (\n  <Route\n    {...rest}\n    render={props =>\n      localStorage.getItem(\"user\") ? (\n        <Component {...props} />\n      ) : (\n        <Redirect\n          to={{ pathname: \"/login\", state: { from: props.location } }}\n        />\n      )\n    }\n  />\n);\n","import React, { Fragment, Suspense, lazy } from \"react\";\nimport { Router, Route, Switch } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { history } from \"./_helpers/history\";\nimport { alertActions } from \"./actions/alertActions\";\nimport { notificationActions } from \"./actions//notificationActions\";\nimport { PrivateRoute } from \"./components/PrivateRoute\";\nimport \"./styles/index.css\";\n\nconst NotFoundPage = lazy(() => import(\"./NotFoundPage/NotFoundPage\"));\nconst PasswordResetPage = lazy(() =>\n  import(\"./PasswordResetPage/PasswordResetPage\")\n);\nconst HomePage = lazy(() => import(\"./HomePage/HomePage\"));\nconst LoginPage = lazy(() => import(\"./LoginPage/LoginPage\"));\nconst RegisterPage = lazy(() => import(\"./RegisterPage/RegisterPage\"));\nconst ProfilePage = lazy(() => import(\"./ProfilePage/ProfilePage\"));\nconst UserProfile = lazy(() => import(\"./UserProfile/UserProfile\"));\nconst PostUploadPage = lazy(() => import(\"./PostUploadPage/PostUploadPage\"));\nconst PostPage = lazy(() => import(\"./PostPage/PostPage\"));\nconst HashtagPage = lazy(() => import(\"./HashtagPage/HashtagPage\"));\nconst LocationPage = lazy(() => import(\"./LocationPage/LocationPage\"));\nconst MessengerPage = lazy(() => import(\"./MessengerPage/MessengerPage\"));\nconst Navbar = lazy(() => import(\"./components/Navbar\"));\n\nclass App extends React.Component {\n  componentDidMount() {\n    const { dispatch } = this.props;\n    window.addEventListener(\"scroll\", this.handleNotificationPopupClose);\n    history.listen((location, action) => {\n      // clear alert on location change\n      dispatch(alertActions.clear());\n    });\n  }\n\n  handleNotificationPopupClose = () => {\n    const { dispatch, isOpen } = this.props;\n    if (isOpen) {\n      dispatch(notificationActions.closeNotificationPopup());\n    }\n  };\n\n  render() {\n    const { authentication } = this.props;\n\n    return (\n      <div onClick={this.handleNotificationPopupClose}>\n        <Router history={history}>\n          <Suspense fallback={<div>Loading...</div>}>\n            <Fragment>\n              {authentication.loggedIn ? <Navbar /> : null}\n              <Switch>\n                <PrivateRoute exact path=\"/\" component={HomePage} />\n                <Route exact path=\"/login\" render={() => <LoginPage />} />\n                <Route exact path=\"/register\" render={() => <RegisterPage />} />\n                <PrivateRoute exact path=\"/profile\" component={ProfilePage} />\n                <PrivateRoute\n                  exact\n                  path=\"/posts/upload\"\n                  component={PostUploadPage}\n                />\n                <PrivateRoute\n                  exact\n                  path=\"/messages/chat\"\n                  component={MessengerPage}\n                />\n                <Route\n                  path=\"/hashtags/:hashtag\"\n                  render={(props) => {\n                    if (!localStorage.getItem(\"user\")) {\n                      history.push(\"/login\");\n                      window.location.reload();\n                    }\n                    return (\n                      <HashtagPage\n                        key={props.match.params.hashtag}\n                        {...props}\n                      />\n                    );\n                  }}\n                />\n                <Route\n                  path=\"/p/:postId\"\n                  render={(props) => {\n                    if (!localStorage.getItem(\"user\")) {\n                      history.push(\"/login\");\n                      window.location.reload();\n                    }\n                    return (\n                      <PostPage key={props.match.params.postId} {...props} />\n                    );\n                  }}\n                />\n                <Route\n                  path=\"/location/:coordinates\"\n                  render={(props) => {\n                    if (!localStorage.getItem(\"user\")) {\n                      history.push(\"/login\");\n                      window.location.reload();\n                    }\n                    return (\n                      <LocationPage\n                        key={props.match.params.coordinates}\n                        {...props}\n                      />\n                    );\n                  }}\n                />\n                <Route\n                  exact\n                  path=\"/:username\"\n                  render={(props) => {\n                    if (!localStorage.getItem(\"user\")) {\n                      history.push(\"/login\");\n                      window.location.reload();\n                    }\n                    return (\n                      <UserProfile\n                        key={props.match.params.username}\n                        {...props}\n                      />\n                    );\n                  }}\n                />\n\n                <Route\n                  exact\n                  path=\"/auth/reset/password/:jwt\"\n                  render={(props) => <PasswordResetPage {...props} />}\n                />\n                <Route render={() => <NotFoundPage />} />\n              </Switch>\n            </Fragment>\n          </Suspense>\n        </Router>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  authentication: state.authentication,\n  isOpen: state.notification.isOpen,\n});\n\nconst connectedApp = connect(mapStateToProps)(App);\nexport { connectedApp as App };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { userConstants } from \"../_constants/userConstants\";\n\nlet user = JSON.parse(localStorage.getItem(\"user\"));\nconst initialState = user ? { loggedIn: true, user } : {};\n\nexport function authentication(state = initialState, action) {\n  switch (action.type) {\n    case userConstants.LOGIN_REQUEST:\n      return {\n        loggingIn: true\n      };\n    case userConstants.LOGIN_SUCCESS:\n      return {\n        ...state,\n        loggedIn: true,\n        user: action.user\n      };\n    case userConstants.LOGIN_FAILURE:\n      return {};\n    case userConstants.LOGOUT:\n      return {};\n    default:\n      return state;\n  }\n}\n","import { postConstants } from \"../_constants/postConstants\";\nimport { commentConstants } from \"../_constants/commentConstants\";\n\nconst initialState = {\n  posts: [],\n  postsByHashtag: [],\n  postsByLocation: [],\n  totalPosts: 0,\n  totalPostsByHashtag: 0,\n  totalPostsByLocation: 0,\n  coordinates: null,\n  hashtag: null,\n  postLikes: [],\n  post: {\n    fetching: true\n  },\n  fetching: false,\n  deleting: false,\n  posting: false\n};\n\nexport function post(state = initialState, action) {\n  switch (action.type) {\n    case postConstants.POSTS_REQUEST:\n      return {\n        ...state,\n        fetching: true\n      };\n    case postConstants.LOCATION_POSTS_REQUEST:\n      if (action.initialFetch) {\n        return {\n          ...state,\n          postsByLocation: [],\n          totalPostsByLocation: 0,\n          coordinates: null\n        };\n      }\n      return {\n        ...state\n      };\n    case postConstants.HASHTAG_POSTS_REQUEST:\n      if (action.initialFetch) {\n        return {\n          ...state,\n          postsByHashtag: [],\n          totalPostsByHashtag: 0,\n          hashtag: null\n        };\n      }\n      return {\n        ...state\n      };\n    case postConstants.POSTS_SUCCESS:\n      if (action.initialFetch) {\n        return {\n          ...state,\n          posts: action.posts,\n          totalPosts: action.total.count,\n          fetching: false\n        };\n      }\n      return {\n        ...state,\n        posts: [...state.posts, ...action.posts],\n        fetching: false\n      };\n    case postConstants.HASHTAG_POSTS_SUCCESS:\n      if (action.initialFetch) {\n        return {\n          ...state,\n          postsByHashtag: action.posts,\n          hashtag: action.hashtag,\n          totalPostsByHashtag: action.total.count,\n          fetching: false\n        };\n      }\n      return {\n        ...state,\n        postsByHashtag: [...state.postsByHashtag, ...action.posts],\n        fetching: false\n      };\n    case postConstants.LOCATION_POSTS_SUCCESS:\n      if (action.initialFetch) {\n        return {\n          ...state,\n          postsByLocation: action.posts,\n          coordinates: action.coordinates,\n          totalPostsByLocation: action.total.count,\n          fetching: false\n        };\n      }\n      return {\n        ...state,\n        postsByLocation: [...state.postsByLocation, ...action.posts],\n        fetching: false\n      };\n    case postConstants.GET_POST_LIKES:\n      return {\n        ...state,\n        postLikes: [...state.postLikes, ...action.postLikes]\n      };\n    case \"CLEAR_POSTS\":\n      return {\n        ...state,\n        ...initialState\n      };\n    case \"CLEAR_POST_LIKES\":\n      return {\n        ...state,\n        postLikes: []\n      };\n\n    case postConstants.POST_DELETE_REQUEST:\n      return {\n        ...state,\n        deleting: true\n      };\n    case postConstants.POST_DELETE_SUCCESS:\n      return {\n        ...state,\n        deleting: false,\n        post: {\n          fetching: true\n        }\n      };\n    case commentConstants.ADD_COMMENT_SUCCESS:\n      return {\n        ...state,\n        posts: state.posts.map(post => {\n          if (post._id === action.comment.post) {\n            return { ...post, comments: post.comments + 1 };\n          } else {\n            return post;\n          }\n        }),\n        post: {\n          ...state.post,\n          comments: state.post.comments + 1\n        }\n      };\n\n    case postConstants.LIKE_POST:\n      return {\n        ...state,\n        posts: state.posts.map(post => {\n          if (post._id === action.post.postId) {\n            return { ...post, likes: post.likes + 1 };\n          } else {\n            return post;\n          }\n        }),\n        post: {\n          ...state.post,\n          likes: state.post.likes + 1\n        }\n      };\n    case postConstants.DISLIKE_POST:\n      return {\n        ...state,\n        posts: state.posts.map(post => {\n          if (post._id === action.post.postId) {\n            return { ...post, likes: post.likes - 1 };\n          } else {\n            return post;\n          }\n        }),\n        post: {\n          ...state.post,\n          likes: state.post.likes - 1\n        }\n      };\n    case postConstants.GET_POST:\n      return {\n        ...state,\n        post: { ...action.post[0], fetching: false }\n      };\n    default:\n      return state;\n  }\n}\n","import { userConstants } from \"../_constants/userConstants\";\nimport { postConstants } from \"../_constants/postConstants\";\nimport { commentConstants } from \"../_constants/commentConstants\";\n\nconst initialState = {\n  loadingUser: true,\n  data: {\n    profilePicture: \"person.png\",\n    firstName: \"\",\n    lastName: \"\",\n    username: \"\",\n    email: \"\",\n    bio: \"\",\n    followings: 0,\n    followers: 0,\n    postsCount: 0,\n    follwingUsers: [],\n    followerUsers: [],\n    posts: [],\n  },\n};\n\nexport function userProfile(state = initialState, action) {\n  switch (action.type) {\n    case userConstants.GET_USERPROFILE_DATA_REQUEST:\n      return {\n        ...state,\n        ...initialState,\n      };\n\n    case userConstants.GET_USERPROFILE_DATA:\n      return {\n        ...state,\n        loadingUser: false,\n        data: {\n          ...state.data,\n          ...action.user.user,\n        },\n      };\n    case userConstants.GET_USERPROFILE_DATA_FAILURE:\n      return {\n        ...state,\n        loadingUser: false,\n      };\n    case userConstants.GET_USER_PROFILE_FOLLOWINGS:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          follwingUsers: action.users,\n        },\n      };\n    case userConstants.GET_USER_PROFILE_POSTS:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          posts: [...state.data.posts, ...action.posts],\n        },\n      };\n\n    case userConstants.GET_USER_PROFILE_FOLLOWERS:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          followerUsers: action.users,\n        },\n      };\n    case postConstants.LIKE_POST:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          posts: state.data.posts.map((post) => {\n            if (post._id === action.post.postId) {\n              return {\n                ...post,\n                likes: post.likes + 1,\n              };\n            }\n            return {\n              ...post,\n            };\n          }),\n        },\n      };\n    case postConstants.DISLIKE_POST:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          posts: state.data.posts.map((post) => {\n            if (post._id === action.post.postId) {\n              return {\n                ...post,\n                likes: post.likes - 1,\n              };\n            }\n            return {\n              ...post,\n            };\n          }),\n        },\n      };\n    case userConstants.FOLLOW_USER:\n      if (action.user.userId === state.data._id) {\n        return {\n          ...state,\n          data: {\n            ...state.data,\n            followers: state.data.followers + 1,\n          },\n        };\n      } else {\n        return {\n          ...state,\n        };\n      }\n    case commentConstants.ADD_COMMENT_SUCCESS:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          posts: state.data.posts.map((post) => {\n            if (post._id === action.comment.post) {\n              return { ...post, comments: post.comments + 1 };\n            } else {\n              return post;\n            }\n          }),\n        },\n      };\n    case userConstants.UNFOLLOW_USER:\n      if (action.user.userId === state.data._id) {\n        return {\n          ...state,\n          data: {\n            ...state.data,\n            followers: state.data.followers - 1,\n          },\n        };\n      } else {\n        return {\n          ...state,\n        };\n      }\n    default:\n      return state;\n  }\n}\n","import { postConstants } from \"../_constants/postConstants\";\n\nconst initialState = {\n  imgSrc: null,\n  imgSrcExt: null,\n  cropImgSrc: null,\n  canvasHasValue: false,\n  divs: [],\n  step: 0,\n  uploading: false,\n  location: {\n    coordinates: [],\n    locationName: \"\"\n  }\n};\n\nexport function postUpload(state = initialState, action) {\n  switch (action.type) {\n    case \"RESET_IMAGE\":\n      return {\n        ...state,\n        ...initialState\n      };\n    case \"PREVIOUS_PAGE\":\n      if (state.step > 0) {\n        return {\n          ...state,\n          step: state.step - 1,\n          divs: []\n        };\n      } else {\n        return {\n          ...state\n        };\n      }\n    case \"NEXT_PAGE\":\n      if (state.step < 1) {\n        return {\n          ...state,\n          step: state.step + 1\n        };\n      } else {\n        return {\n          ...state\n        };\n      }\n    case \"ADD_IMAGE_TAG\":\n      return {\n        ...state,\n        divs: [...state.divs, action.div]\n      };\n\n    case \"DELETE_IMAGE_TAG\":\n      return {\n        ...state,\n        divs: state.divs.filter(({ id }) => id !== action.id)\n      };\n    case postConstants.ADD_POST_REQUEST:\n      return {\n        ...state,\n        uploading: true\n      };\n\n    case postConstants.CANVAS_HAS_VALUE:\n      return {\n        ...state,\n        canvasHasValue: action.hasValue\n      };\n    case postConstants.IMAGE_SELECT:\n      return {\n        ...state,\n        imgSrc: action.imgSrc,\n        imgSrcExt: action.imgSrcExt\n      };\n    case postConstants.IMAGE_CROP_SELECT:\n      return {\n        ...state,\n        cropImgSrc: action.imgSrc\n      };\n\n    case postConstants.MAP_LOCATION_SELECT:\n      const { text, geometry } = action.location;\n      return {\n        ...state,\n        location: {\n          ...state.location,\n          coordinates: geometry.coordinates,\n          locationName: text\n        }\n      };\n    case postConstants.ADD_POST_SUCCESS:\n      return {\n        ...state,\n        ...initialState,\n        step: 0,\n        uploading: false\n      };\n    case postConstants.ADD_POST_FAILURE:\n      return {\n        ...state,\n        uploading: false\n      };\n    default:\n      return state;\n  }\n}\n","import { userConstants } from \"../_constants/userConstants\";\n\nconst initialState = {\n  users: [],\n  fetching: true,\n  fetchingNewUsers: false,\n  usersCount: 0\n};\n\nexport function newUsers(state = initialState, action) {\n  switch (action.type) {\n    case userConstants.GET_NEW_USERS_SUCCESS:\n      if (action.data.initialFetch) {\n        return {\n          ...state,\n          users: [...action.data.users, ...state.users],\n          usersCount: action.data.usersCount,\n          fetching: false\n        };\n      }\n      return {\n        ...state,\n        users: [...state.users, ...action.data.users],\n        fetchingNewUsers: false\n      };\n    case userConstants.GET_NEW_USERS_REQUEST:\n      return {\n        ...state,\n        fetchingNewUsers: true\n      };\n    case userConstants.NEW_USER:\n      return {\n        ...state,\n        users: [action.user, ...state.users],\n        usersCount: state.usersCount + 1\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\n\nimport { authentication } from \"./authenticationReducer\";\nimport { registration } from \"./registrationReducer\";\nimport { user } from \"./userReducer\";\nimport { alert } from \"./alertReducer\";\nimport { post } from \"./postReducer\";\nimport { comments } from \"./commentReducer\";\nimport { replies } from \"./commentRepliesReducer\";\nimport { userProfile } from \"./userProfileReducer\";\nimport { notification } from \"./notificationReducer\";\nimport { socket } from \"./socketReducer\";\nimport { postUpload } from \"./postUploadPageReducer\";\nimport { chat } from \"./chatReducer\";\nimport { newUsers } from \"./newUsersReducer\";\nimport { passwordReset } from \"./passwordResetReducer\";\nimport { userConstants } from \"../_constants/userConstants\";\n\nconst appReducer = combineReducers({\n  post,\n  authentication,\n  registration,\n  user,\n  newUsers,\n  passwordReset,\n  alert,\n  comments,\n  replies,\n  userProfile,\n  notification,\n  socket,\n  postUpload,\n  chat,\n});\n\nconst rootReducer = (state, action) => {\n  if (action.type === userConstants.LOGOUT) {\n    state = undefined;\n  }\n\n  return appReducer(state, action);\n};\n\nexport default rootReducer;\n","import { userConstants } from \"../_constants/userConstants\";\n\nexport function registration(state = {}, action) {\n  switch (action.type) {\n    case userConstants.REGISTER_REQUEST:\n      return { registering: true };\n    case userConstants.REGISTER_SUCCESS:\n      return {};\n    case userConstants.REGISTER_FAILURE:\n      return {};\n    default:\n      return state;\n  }\n}\n","import { userConstants } from \"../_constants/userConstants\";\nimport { postConstants } from \"../_constants/postConstants\";\nimport { commentConstants } from \"../_constants/commentConstants\";\nimport { notificationConstants } from \"../_constants/notificationConstants\";\nimport { chatConstants } from \"../_constants/chatConstants\";\n\nexport function user(\n  state = {\n    loadingUser: true,\n    updaingUser: false,\n    deleting: false,\n    hasError: false,\n    data: {\n      _id: \"\",\n      username: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      profilePicture: \"person.png\",\n      bio: \"\",\n      followers: 0,\n      followings: 0,\n      postsCount: 0,\n      allNotifications: 0,\n      notificationsCount: 0,\n      messagesCount: 0,\n      followingIds: [],\n      posts: [],\n      follwingUsers: [],\n      followerUsers: [],\n      notifications: [],\n      postLikes: [],\n      commentLikes: [],\n      commentReplyLikes: [],\n    },\n  },\n  action\n) {\n  switch (action.type) {\n    case userConstants.GETUSER_REQUEST:\n      return {\n        ...state,\n        loadingUser: true,\n      };\n    case userConstants.USER_UPDATE_REQUEST: {\n      return {\n        ...state,\n        updaingUser: true,\n      };\n    }\n    case userConstants.USER_UPDATE_SUCCESS:\n      const { firstName, lastName, username, email, bio } = action.user;\n      return {\n        ...state,\n        updaingUser: false,\n        hasError: false,\n        data: {\n          ...state.data,\n          firstName,\n          lastName,\n          username,\n          email,\n          bio,\n        },\n      };\n    case userConstants.USER_UPDATE_FAILURE:\n      return {\n        ...state,\n        updaingUser: false,\n        hasError: action.error,\n      };\n    case userConstants.GETUSER_SUCCESS:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          ...action.user,\n        },\n        loadingUser: false,\n      };\n    case userConstants.USER_UPDATE_PROFILEPICTURE_SUCCESS:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          profilePicture: action.user.profilePicture,\n        },\n        loadingUser: false,\n      };\n    case userConstants.USER_LIKE_COMMENT:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          commentLikes: [...state.data.commentLikes, action.comment.commentId],\n        },\n      };\n\n    case userConstants.USER_DISLIKE_COMMENT:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          commentLikes: state.data.commentLikes.filter(\n            (e) => e !== action.comment.commentId\n          ),\n        },\n      };\n\n    case userConstants.USER_LIKE_COMMENT_REPLY:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          commentReplyLikes: [\n            ...state.data.commentReplyLikes,\n            action.comment.commentId,\n          ],\n        },\n      };\n\n    case userConstants.USER_DISLIKE_COMMENT_REPLY:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          commentReplyLikes: state.data.commentReplyLikes.filter(\n            (e) => e !== action.comment.commentId\n          ),\n        },\n      };\n    case commentConstants.ADD_COMMENT_SUCCESS:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          posts: state.data.posts.map((post) => {\n            if (post._id === action.comment.post) {\n              return { ...post, comments: post.comments + 1 };\n            } else {\n              return post;\n            }\n          }),\n        },\n      };\n    case postConstants.LIKE_POST:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          postLikes: [...state.data.postLikes, action.post.postId],\n          posts: state.data.posts.map((post) => {\n            if (post._id === action.post.postId) {\n              return {\n                ...post,\n                likes: post.likes + 1,\n              };\n            }\n            return {\n              ...post,\n            };\n          }),\n        },\n      };\n\n    case postConstants.DISLIKE_POST:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          postLikes: state.data.postLikes.filter(\n            (e) => e !== action.post.postId\n          ),\n          posts: state.data.posts.map((post) => {\n            if (post._id === action.post.postId) {\n              return {\n                ...post,\n                likes: post.likes - 1,\n              };\n            }\n            return {\n              ...post,\n            };\n          }),\n        },\n      };\n\n    case userConstants.FOLLOW_USER:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          followingIds: [...state.data.followingIds, action.user.userId],\n        },\n      };\n    case userConstants.UNFOLLOW_USER:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          followingIds: state.data.followingIds.filter(\n            (e) => e !== action.user.userId\n          ),\n        },\n      };\n    case userConstants.GET_POSTS:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          posts: [...state.data.posts, ...action.posts],\n        },\n      };\n    case postConstants.ADD_POST_REQUEST:\n      return {\n        ...state,\n        posting: true,\n      };\n    case postConstants.ADD_POST_SUCCESS:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          posts: [action.post, ...state.data.posts],\n          postsCount: state.data.postsCount + 1,\n        },\n        posting: false,\n      };\n    case notificationConstants.READ_NOTIFICATIOS:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          notificationsCount: state.data.notificationsCount - action.readCount,\n        },\n      };\n    case postConstants.POST_DELETE_REQUEST:\n      return {\n        ...state,\n        deleting: true,\n      };\n    case postConstants.POST_DELETE_SUCCESS:\n      return {\n        ...state,\n\n        data: {\n          ...state.data,\n          posts: state.data.posts.filter(\n            (post) => post._id !== action.result.id\n          ),\n          postsCount: state.data.postsCount - 1,\n        },\n        deleting: false,\n      };\n\n    case notificationConstants.ADD_NOTIFICATION:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          notificationsCount: state.data.notificationsCount + 1,\n        },\n      };\n    case postConstants.GET_POST:\n      return {\n        ...state,\n        openedPost: {\n          ...state.openedPost,\n          loadingPost: false,\n          data: action.post[0],\n        },\n      };\n    case userConstants.GET_USER_FOLLOWERS:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          followerUsers: action.users,\n        },\n      };\n    case userConstants.GET_USER_FOLLOWINGS:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          follwingUsers: action.users,\n        },\n      };\n\n    case chatConstants.INC_MESSAGE_COUNT:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          messagesCount: state.data.messagesCount + 1,\n        },\n      };\n    case chatConstants.READ_MESSAGES:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          messagesCount: state.data.messagesCount - action.messageIds.length,\n        },\n      };\n    default:\n      return state;\n  }\n}\n","import { userConstants } from \"../_constants/userConstants\";\n\nexport function passwordReset(\n  state = {\n    requesting: false,\n  },\n  action\n) {\n  switch (action.type) {\n    case userConstants.PASSWORD_RESET_REQUEST:\n      return { ...state, requesting: true };\n    case userConstants.PASSWORD_RESET_RESPONSE:\n      return { ...state, requesting: false };\n    default:\n      return state;\n  }\n}\n","import { alertConstants } from \"../_constants/alertConstants\";\n\nexport function alert(state = {}, action) {\n  switch (action.type) {\n    case alertConstants.SUCCESS:\n      return {\n        type: \"success\",\n        message: action.message\n      };\n    case alertConstants.ERROR:\n      return {\n        type: \"error\",\n        message: action.message\n      };\n    case alertConstants.CLEAR:\n      return {};\n    default:\n      return state;\n  }\n}\n","import { commentConstants } from \"../_constants/commentConstants\";\nimport { postConstants } from \"../_constants/postConstants\";\n\nexport function comments(state = { commentLikes: [] }, action) {\n  switch (action.type) {\n    case commentConstants.FETCH_COMMENTS_REQUEST:\n      return {\n        ...state,\n        [action.postId]: {\n          ...state[action.postId],\n          fetching: true\n        }\n      };\n\n    case commentConstants.FETCH_COMMENTS_SUCCESS:\n      return {\n        ...state,\n        [action.comment.postId]: {\n          ...state[action.comment.postId],\n          fetching: false,\n          comments: [\n            ...state[action.comment.postId].comments,\n            ...action.comment.comments\n          ]\n        }\n      };\n\n    case postConstants.INIT_COMMENT:\n      if (!state[[action.postId]]) {\n        return {\n          ...state,\n          [action.postId]: {\n            fetching: false,\n            comments: []\n          }\n        };\n      } else {\n        return { ...state };\n      }\n\n    case commentConstants.INCREASE_REPLIES_NUMBER:\n      return {\n        ...state,\n        [action.postId]: {\n          ...state[action.postId],\n          comments: state[action.postId].comments.map(comment => {\n            if (comment._id === action.commentId) {\n              return { ...comment, replies: comment.replies + 1 };\n            } else {\n              return comment;\n            }\n          })\n        }\n      };\n\n    case commentConstants.ADD_COMMENT_SUCCESS:\n      return {\n        ...state,\n        [action.comment.post]: {\n          ...state[action.comment.post],\n          fetching: false,\n          comments: [action.comment, ...state[action.comment.post].comments]\n        }\n      };\n\n    case commentConstants.LIKE_COMMENT:\n      return {\n        ...state,\n        [action.comment.postId]: {\n          ...state[action.comment.postId],\n          comments: state[action.comment.postId].comments.map(comment => {\n            if (comment._id === action.comment.commentId) {\n              return { ...comment, likes: comment.likes + 1 };\n            } else {\n              return comment;\n            }\n          })\n        }\n      };\n\n    case commentConstants.DISLIKE_COMMENT:\n      return {\n        ...state,\n        [action.comment.postId]: {\n          ...state[action.comment.postId],\n          comments: state[action.comment.postId].comments.map(comment => {\n            if (comment._id === action.comment.commentId) {\n              return { ...comment, likes: comment.likes - 1 };\n            } else {\n              return comment;\n            }\n          })\n        }\n      };\n\n    case commentConstants.GET_COMMENT_LIKES:\n      return {\n        ...state,\n        commentLikes: [...state.commentLikes, ...action.commentLikes]\n      };\n\n    case \"CLEAR_COMMENT_LIKES\":\n      return {\n        ...state,\n        commentLikes: []\n      };\n\n    default:\n      return state;\n  }\n}\n","import { commentConstants } from \"../_constants/commentConstants\";\n\nexport function replies(state = { commentLikes: [] }, action) {\n  switch (action.type) {\n    case commentConstants.FETCH_COMMENT_REPLIES_REQUEST:\n      return {\n        ...state,\n        [action.commentId]: {\n          ...state[action.commentId],\n          fetching: true\n        }\n      };\n\n    case commentConstants.FETCH_COMMENT_REPLIES_SUCCESS:\n      return {\n        ...state,\n        [action.comment.commentId]: {\n          ...state[action.comment.commentId],\n          fetching: false,\n          comments: [\n            ...state[action.comment.commentId].comments,\n            ...action.comment.comments\n          ]\n        }\n      };\n\n    case commentConstants.INIT_REPLY_COMMENT:\n      if (!state[action.commentId]) {\n        return {\n          ...state,\n          [action.commentId]: {\n            fetching: false,\n            comments: []\n          }\n        };\n      } else {\n        return { ...state };\n      }\n\n    case commentConstants.ADD_REPLY_COMMENT_SUCCESS:\n      return {\n        ...state,\n        [action.comment.commentAt]: {\n          ...state[action.comment.commentAt],\n          fetching: false,\n          comments: [\n            action.comment,\n            ...state[action.comment.commentAt].comments\n          ]\n        }\n      };\n\n    case commentConstants.LIKE_COMMENT_REPLY:\n      return {\n        ...state,\n        [action.comment.parentId]: {\n          ...state[action.comment.parentId],\n          comments: state[action.comment.parentId].comments.map(comment => {\n            if (comment._id === action.comment.commentId) {\n              return { ...comment, likes: comment.likes + 1 };\n            } else {\n              return comment;\n            }\n          })\n        }\n      };\n\n    case commentConstants.DISLIKE_COMMENT_REPLY:\n      return {\n        ...state,\n        [action.comment.parentId]: {\n          ...state[action.comment.parentId],\n          comments: state[action.comment.parentId].comments.map(comment => {\n            if (comment._id === action.comment.commentId) {\n              return { ...comment, likes: comment.likes - 1 };\n            } else {\n              return comment;\n            }\n          })\n        }\n      };\n\n    case commentConstants.GET_COMMENT_REPLY_LIKES:\n      return {\n        ...state,\n        commentLikes: [...state.commentLikes, ...action.commentLikes]\n      };\n\n    case \"CLEAR_COMMENT_REPLY_LIKES\":\n      return {\n        ...state,\n        commentLikes: []\n      };\n\n    default:\n      return state;\n  }\n}\n","import { notificationConstants } from \"../_constants/notificationConstants\";\nimport { userConstants } from \"../_constants/userConstants\";\n\nexport function notification(\n  state = {\n    isOpen: false,\n    notifications: [],\n    allNotificationsCount: 0\n  },\n  action\n) {\n  switch (action.type) {\n    case notificationConstants.FETCH_NOTIFICATIONS_SUCCESS:\n      if (action.initialFetch) {\n        return {\n          ...state,\n          notifications: action.notifications,\n          allNotificationsCount: action.total.count\n        };\n      }\n      return {\n        ...state,\n        notifications: [...state.notifications, ...action.notifications]\n      };\n\n    case notificationConstants.CLOSE_NOTIFICATION_POPUP:\n      return {\n        ...state,\n        isOpen: false\n      };\n    case notificationConstants.TOGGLE_NOTIFICATION_POPUP:\n      return {\n        ...state,\n        isOpen: !state.isOpen\n      };\n    case notificationConstants.ADD_NOTIFICATION:\n      return {\n        ...state,\n        notifications: [action.data.notification, ...state.notifications],\n        allNotificationsCount: state.allNotificationsCount + 1\n      };\n    case notificationConstants.READ_NOTIFICATIOS:\n      return {\n        ...state,\n        notifications: state.notifications.map(e => {\n          return {\n            ...e,\n            read: true\n          };\n        })\n      };\n    case userConstants.GETUSER_SUCCESS:\n      return {\n        ...state,\n        allNotificationsCount: action.user.allNotifications\n      };\n    default:\n      return state;\n  }\n}\n","import { socketConstants } from \"../_constants/socketConstants\";\n\nexport function socket(state = {}, action) {\n  switch (action.type) {\n    case socketConstants.CONNECT:\n      return {\n        ...state,\n        socket: action.socket\n      };\n\n    default:\n      return state;\n  }\n}\n","import { chatConstants } from \"../_constants/chatConstants\";\n\nexport function chat(\n  state = {\n    rooms: [],\n    currentRoom: null,\n    roomsFetching: false,\n    roomId: null,\n    callingModal: false,\n    answeringModal: {\n      isOpen: false,\n    },\n    searchedRooms: null,\n  },\n  action\n) {\n  switch (action.type) {\n    case chatConstants.TYPING:\n      if (state[action.roomId]) {\n        return {\n          ...state,\n          [action.roomId]: {\n            ...state[action.roomId],\n            isTyping: true,\n          },\n        };\n      } else {\n        return {\n          ...state,\n        };\n      }\n    case chatConstants.STOPPED_TYPING:\n      if (state[action.roomId]) {\n        return {\n          ...state,\n          [action.roomId]: {\n            ...state[action.roomId],\n            isTyping: false,\n          },\n        };\n      } else {\n        return {\n          ...state,\n        };\n      }\n    case chatConstants.CHANGE_ROOM:\n      return {\n        ...state,\n        currentRoom: action.room,\n        roomId: action.room._id,\n      };\n    case chatConstants.INIT_MESSAGE_ARRAY:\n      if (!state[action.roomId]) {\n        return {\n          ...state,\n          [action.roomId]: {\n            messages: [],\n            initialMessagesFetchig: false,\n            messageFetching: false,\n            isTyping: false,\n          },\n        };\n      } else {\n        return {\n          ...state,\n        };\n      }\n\n    case chatConstants.GET_ROOMS_REQUEST:\n      return {\n        ...state,\n        roomsFetching: true,\n      };\n    case chatConstants.GET_ROOMS_SUCCESS:\n      return {\n        ...state,\n        rooms: action.rooms,\n        roomsFetching: false,\n      };\n    case chatConstants.ADD_NEW_ROOM:\n      return {\n        ...state,\n        rooms: [action.room, ...state.rooms],\n      };\n    case chatConstants.GET_MESSAGES_INITIAL_REQUEST:\n      return {\n        ...state,\n        [action.roomId]: {\n          ...state[action.roomId],\n          initialMessagesFetchig: true,\n        },\n      };\n    case chatConstants.GET_MESSAGES_REQUEST:\n      return {\n        ...state,\n        [action.roomId]: {\n          ...state[action.roomId],\n          messageFetching: true,\n        },\n      };\n    case chatConstants.GET_MESSAGES_SUCCESS:\n      let messages = action.data.messages;\n      let prev = null;\n\n      for (let i = 0; i < messages.length; i++) {\n        if (prev !== messages[i].sender) {\n          messages[i].picture = true;\n          prev = messages[i].sender;\n        } else {\n          messages[i].picture = false;\n        }\n      }\n\n      return {\n        ...state,\n        [action.data.roomId]: {\n          ...state[action.data.roomId],\n          messages: [\n            ...action.data.messages,\n            ...state[action.data.roomId].messages,\n          ],\n          messageFetching: false,\n          initialMessagesFetchig: false,\n        },\n      };\n    case chatConstants.SEND_MESSAGE_REQUEST:\n      let currentRoom = state.currentRoom;\n      if (currentRoom && state.currentRoom._id === action.message.roomId) {\n        currentRoom = {\n          ...state.currentRoom,\n          messages: state.currentRoom.messages + 1,\n        };\n      }\n\n      if (state[action.message.roomId]) {\n        const messages = state[action.message.roomId].messages;\n        if (!messages.length) action.message.picture = true;\n        else if (messages[messages.length - 1].sender !== action.message.sender)\n          action.message.picture = true;\n        else action.message.picture = false;\n\n        return {\n          ...state,\n          [action.message.roomId]: {\n            ...state[action.message.roomId],\n            messages: [\n              ...state[action.message.roomId].messages,\n              action.message,\n            ],\n          },\n          rooms: state.rooms.map((room) => {\n            if (room._id === action.message.roomId) {\n              return {\n                ...room,\n                messages: room.messages + 1,\n              };\n            } else {\n              return room;\n            }\n          }),\n          currentRoom,\n        };\n      } else {\n        return {\n          ...state,\n        };\n      }\n    case chatConstants.SEND_MESSAGE_SUCCESS:\n      if (state[action.message.roomId]) {\n        const index = state.rooms.findIndex(\n          (room) => room._id === action.message.roomId\n        );\n        const newRoom = state.rooms[index];\n\n        const messages = state[action.message.roomId].messages;\n        if (messages.length <= 1) action.message.picture = true;\n        else if (messages[messages.length - 2].sender !== action.message.sender)\n          action.message.picture = true;\n        else action.message.picture = false;\n\n        return {\n          ...state,\n          [action.message.roomId]: {\n            ...state[action.message.roomId],\n            messages: state[action.message.roomId].messages.map((message) => {\n              if (message.uuid === action.message.uuid) {\n                return action.message;\n              } else {\n                return message;\n              }\n            }),\n          },\n          rooms: [\n            {\n              ...newRoom,\n              //messages: newRoom.messages + 1,\n              lastMessage: [action.message],\n            },\n            ...state.rooms.filter((room) => room._id !== action.message.roomId),\n          ],\n        };\n      } else {\n        return {\n          ...state,\n        };\n      }\n    case chatConstants.NEW_MESSAGE:\n      if (state[action.message.roomId]) {\n        const index = state.rooms.findIndex(\n          (room) => room._id === action.message.roomId\n        );\n        const newRoom = state.rooms[index];\n\n        const messages = state[action.message.roomId].messages;\n        if (!messages.length) action.message.picture = true;\n        else if (messages[messages.length - 1].sender !== action.message.sender)\n          action.message.picture = true;\n        else action.message.picture = false;\n\n        let currentRoom = state.currentRoom;\n        if (currentRoom && state.currentRoom._id === action.message.roomId) {\n          currentRoom = {\n            ...state.currentRoom,\n            messages: state.currentRoom.messages + 1,\n          };\n        }\n        return {\n          ...state,\n          [action.message.roomId]: {\n            ...state[action.message.roomId],\n            messages: [\n              ...state[action.message.roomId].messages,\n              action.message,\n            ],\n          },\n          currentRoom,\n          rooms: [\n            {\n              ...newRoom,\n              messages: newRoom.messages + 1,\n              lastMessage: [action.message],\n            },\n            ...state.rooms.filter((room) => room._id !== action.message.roomId),\n          ],\n        };\n      } else {\n        return {\n          ...state,\n        };\n      }\n    case chatConstants.READ_MESSAGES:\n      return {\n        ...state,\n        [action.roomId]: {\n          ...state[action.roomId],\n          messages: state[action.roomId].messages.map((message) => {\n            if (action.messageIds.includes(message._id)) {\n              return {\n                ...message,\n                read: true,\n              };\n            } else {\n              return {\n                ...message,\n              };\n            }\n          }),\n        },\n      };\n    case chatConstants.CHANGE_ACTIVITY_STATUS:\n      return {\n        ...state,\n        rooms: state.rooms.map((room) => {\n          if (room.members[0]._id === action.user.user) {\n            room.members[0].activityStatus = action.user.activityStatus;\n            return {\n              ...room,\n            };\n          } else if (room.members[1]._id === action.user.user) {\n            room.members[1].activityStatus = action.user.activityStatus;\n            return {\n              ...room,\n            };\n          } else {\n            return {\n              ...room,\n            };\n          }\n        }),\n      };\n    case chatConstants.RECEIVE_READ_MESSAGES:\n      if (state[action.data.roomId]) {\n        return {\n          ...state,\n          [action.data.roomId]: {\n            ...state[action.data.roomId],\n            messages: state[action.data.roomId].messages.map((message) => {\n              if (action.data.messageIds.includes(message._id)) {\n                return {\n                  ...message,\n                  read: true,\n                };\n              } else {\n                return {\n                  ...message,\n                };\n              }\n            }),\n          },\n        };\n      } else {\n        return {\n          ...state,\n        };\n      }\n    case chatConstants.OPEN_CALLING_MODAL:\n      return {\n        ...state,\n        callingModal: true,\n      };\n    case chatConstants.CLOSE_CALLING_MODAL:\n      return {\n        ...state,\n        callingModal: false,\n      };\n    case chatConstants.OPEN_ANSWERING_MODAL:\n      return {\n        ...state,\n        answeringModal: {\n          ...state.answeringModal,\n          isOpen: true,\n          webRtc: {\n            ...state.webRtc,\n            ...action.data.webRtc,\n          },\n          caller: {\n            ...state.caller,\n            ...action.data.caller,\n          },\n          room: {\n            ...state.room,\n            ...action.data.room,\n          },\n        },\n      };\n    case chatConstants.CLOSE_ANSWERING_MODAL:\n      return {\n        ...state,\n        answeringModal: {\n          ...state.answeringModal,\n          isOpen: false,\n          webRtc: {},\n          caller: {},\n          room: {},\n        },\n      };\n    case chatConstants.SEARCH_USERS:\n      return {\n        ...state,\n        searchedRooms: action.rooms,\n      };\n    default:\n      return state;\n  }\n}\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n//import { createLogger } from \"redux-logger\";\n\nconst initialState = {};\n\n//const loggerMiddleware = createLogger();\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  compose(\n    applyMiddleware(...middleware)\n    //window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const chatConstants = {\n  CHANGE_ROOM: \"CHANGE_ROOM\",\n  INIT_MESSAGE_ARRAY: \"INIT_MESSAGE_ARRAY\",\n  NEW_MESSAGE: \"NEW_MESSAGE\",\n  READ_MESSAGES: \"READ_MESSAGES\",\n  RECEIVE_READ_MESSAGES: \"RECEIVE_READ_MESSAGES\",\n  CHANGE_ACTIVITY_STATUS: \"CHANGE_ACTIVITY_STATUS\",\n  ADD_NEW_ROOM: \"ADD_NEW_ROOM\",\n  INC_MESSAGE_COUNT: \"INC_MESSAGE_COUNT\",\n  SEARCH_USERS: \"SEARCH_USERS\",\n\n  OPEN_CALLING_MODAL: \"OPEN_CALLING_MODAL\",\n  CLOSE_CALLING_MODAL: \"CLOSE_CALLING_MODAL\",\n\n  NEW_ANSWER: \"NEW_ANSWER\",\n\n  OPEN_ANSWERING_MODAL: \"OPEN_ANSWERING_MODAL\",\n  CLOSE_ANSWERING_MODAL: \"CLOSE_ANSWERING_MODAL\",\n\n  TYPING: \"TYPING\",\n  STOPPED_TYPING: \"STOPPED_TYPING\",\n\n  GET_ROOMS_REQUEST: \"GET_ROOMS_REQUEST\",\n  GET_ROOMS_SUCCESS: \"GET_ROOMS_SUCCESS\",\n\n  GET_MESSAGES_INITIAL_REQUEST: \"GET_MESSAGES_INITIAL_REQUEST\",\n  GET_MESSAGES_REQUEST: \"GET_MESSAGES_REQUEST\",\n  GET_MESSAGES_SUCCESS: \"GET_MESSAGES_SUCCESS\",\n\n  SEND_MESSAGE_REQUEST: \"SEND_MESSAGE_REQUEST\",\n  SEND_MESSAGE_SUCCESS: \"SEND_MESSAGE_SUCCESS\",\n\n  NEW_IMAGE_MESSAGE_REQUEST: \"NEW_IMAGE_MESSAGE_REQUEST\",\n  NEW_IMAGE_MESSAGE_SUCCESS: \"NEW_IMAGE_MESSAGE_SUCCESS\"\n};\n","export const commentConstants = {\n  POSTS_REQUEST: \"POSTS_REQUEST\",\n  POSTS_SUCCESS: \"POSTS_SUCCESS\",\n  POSTS_FAILURE: \"POSTS_FAILURE\",\n\n  FETCH_COMMENTS_REQUEST: \"FETCH_COMMENTS_REQUEST\",\n  FETCH_COMMENTS_SUCCESS: \"FETCH_COMMENTS_SUCCESS\",\n  FETCH_COMMENTS_FAILURE: \"FETCH_COMMENTS_FAILURE\",\n\n  POST_DELETE_REQUEST: \"POSTS_DELETE_REQUEST\",\n  POST_DELETE_SUCCESS: \"POSTS_DELETE_SUCCESS\",\n  POST_DELETE_FAILURE: \"POSTS_DELETE_FAILURE\",\n\n  INIT_REPLY_COMMENT: \"INIT_REPLY_COMMENT\",\n  ADD_REPLY_COMMENT_SUCCESS: \"ADD_REPLY_COMMENT_SUCCESS\",\n  ADD_REPLY_COMMENT_FAILURE: \"ADD_REPLY_COMMENT_FAILURE\",\n\n  FETCH_COMMENT_REPLIES_REQUEST: \"FETCH_COMMENT_REPLIES_REQUEST\",\n  FETCH_COMMENT_REPLIES_SUCCESS: \"FETCH_COMMENT_REPLIES_SUCCESS\",\n  FETCH_COMMENT_REPLIES_FAILURE: \"FETCH_COMMENT_REPLIES_FAILURE\",\n\n  INCREASE_REPLIES_NUMBER: \"INCREASE_REPLIES_NUMBER\",\n\n  ADD_COMMENT_REQUEST: \"ADD_COMMENT_REQUEST\",\n  ADD_COMMENT_SUCCESS: \"ADD_COMMENT_SUCCESS\",\n  ADD_COMMENT_FAILURE: \"ADD_COMMENT_FAILURE\",\n\n  DISLIKE_COMMENT: \"DISLIKE_COMMENT\",\n  LIKE_COMMENT: \"LIKE_COMMENT\",\n\n  LIKE_COMMENT_REPLY: \"LIKE_COMMENT_REPLY\",\n  DISLIKE_COMMENT_REPLY: \"DISLIKE_COMMENT_REPLY\",\n\n  NEW_POST: \"NEW_POST\",\n  GET_COMMENT_LIKES: \"GET_COMMENT_LIKES\",\n  GET_COMMENT_REPLY_LIKES: \"GET_COMMENT_REPLY_LIKES\"\n};\n","export const notificationConstants = {\n  TOGGLE_NOTIFICATION_POPUP: \"TOGGLE_NOTIFICATION_POPUP\",\n  CLOSE_NOTIFICATION_POPUP: \"CLOSE_NOTIFICATION_POPUP\",\n  ADD_NOTIFICATION: \"ADD_NOTIFICATION\",\n  READ_NOTIFICATIOS: \"READ_NOTIFICATIOS\",\n  FETCH_NOTIFICATIONS_REQUEST: \"FETCH_NOTIFICATIONS_REQUEST\",\n  FETCH_NOTIFICATIONS_SUCCESS: \"FETCH_NOTIFICATIONS_SUCCESS\"\n};\n"],"sourceRoot":""}